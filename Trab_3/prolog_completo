:- use_module(library(clpfd)). % Importa a biblioteca de restrições sobre domínios finitos

% Predicado principal para resolver o Futoshiki
resolve_futoshiki(Quadrante, Solucao) :-
    % Garante que o tabuleiro tenha 9 linhas
    length(Quadrante, 9),
    % Garante que cada linha também tenha 9 colunas
    maplist(same_length(Quadrante), Quadrante),

    % Junta todas as variáveis do tabuleiro em uma única lista
    append(Quadrante, Vars),
    % Define o domínio de cada célula: valores de 1 a 9
    Vars ins 1..9,

    % Restrições de Sudoku: todas as linhas com valores diferentes
    maplist(all_distinct, Quadrante),

    % Restrições de Sudoku: todas as colunas com valores diferentes
    transpose(Quadrante, Colunas),
    maplist(all_distinct, Colunas),

    % Restrições dos blocos 3x3
    aplica_restricoes_quadrante(Quadrante),

    % Restrições horizontais de comparação (<, >)
    aplica_restricoes_horizontais(Quadrante),

    % Restrições verticais de comparação (^, v)
    aplica_restricoes_verticais(Quadrante),

    % Estratégia de busca: variável mais restrita primeiro e divisão binária
    labeling([ff, bisect], Vars),

    % Solução final
    Solucao = Quadrante.

% Aplica as restrições dos quadrantes 3x3 (Sudoku tradicional)
aplica_restricoes_quadrante(Quadrante) :-
    forall(between(0, 2, I),                  % Para cada bloco de linha
           forall(between(0, 2, J),           % Para cada bloco de coluna
                  restricao_quadrante(Quadrante, I, J))).

% Define que os 9 elementos de cada quadrante 3x3 sejam diferentes
restricao_quadrante(Quadrante, I, J) :-
    LinhaInicio is I * 3,
    ColunaInicio is J * 3,
    LinhaFim is LinhaInicio + 2,
    ColunaFim is ColunaInicio + 2,
    findall(Celula,
            (between(LinhaInicio, LinhaFim, R),
             between(ColunaInicio, ColunaFim, C),
             nth0(R, Quadrante, Linha),
             nth0(C, Linha, Celula)),
            Quadrante3x3),
    all_distinct(Quadrante3x3).

% Lista de restrições horizontais: (Linha, Coluna, Sinal)
% Cada restrição indica a relação entre uma célula e a célula à direita
restricoes_horizontais([
    % Linha 0
    restricao(0, 0, '<'), restricao(0, 1, '>'),
    restricao(0, 3, '<'), restricao(0, 4, '<'),
    restricao(0, 6, '>'), restricao(0, 7, '>'),

    % Linha 1
    restricao(1, 0, '<'), restricao(1, 1, '<'),
    restricao(1, 3, '<'), restricao(1, 4, '>'),
    restricao(1, 6, '>'), restricao(1, 7, '<'),

    % Linha 2
    restricao(2, 0, '<'), restricao(2, 1, '<'),
    restricao(2, 3, '<'), restricao(2, 4, '>'),
    restricao(2, 6, '>'), restricao(2, 7, '<'),

    % Linha 3
    restricao(3, 0, '>'), restricao(3, 1, '>'),
    restricao(3, 3, '>'), restricao(3, 4, '<'),
    restricao(3, 6, '<'), restricao(3, 7, '>'),

    % Linha 4
    restricao(4, 0, '>'), restricao(4, 1, '<'),
    restricao(4, 3, '>'), restricao(4, 4, '<'),
    restricao(4, 6, '>'), restricao(4, 7, '>'),

    % Linha 5
    restricao(5, 0, '<'), restricao(5, 1, '>'),
    restricao(5, 3, '<'), restricao(5, 4, '>'),
    restricao(5, 6, '>'), restricao(5, 7, '<'),

    % Linha 6
    restricao(6, 0, '<'), restricao(6, 1, '>'),
    restricao(6, 3, '>'), restricao(6, 4, '>'),
    restricao(6, 6, '<'), restricao(6, 7, '>'),

    % Linha 7
    restricao(7, 0, '>'), restricao(7, 1, '<'),
    restricao(7, 3, '>'), restricao(7, 4, '<'),
    restricao(7, 6, '<'), restricao(7, 7, '<'),

    % Linha 8
    restricao(8, 0, '<'), restricao(8, 1, '>'),
    restricao(8, 3, '<'), restricao(8, 4, '<'),
    restricao(8, 6, '<'), restricao(8, 7, '>')
]).


% Lista de restrições verticais: (Linha, Coluna, Sinal)
% Cada restrição indica a relação entre uma célula e a célula abaixo dela
restricoes_verticais([
    % Coluna 0
    restricao(0, 0, 'v'), restricao(1, 0, '^'),
    restricao(3, 0, 'v'), restricao(4, 0, 'v'),
    restricao(6, 0, 'v'), restricao(7, 0, '^'),

    % Coluna 1
    restricao(0, 1, '^'), restricao(1, 1, '^'),
    restricao(3, 1, '^'), restricao(4, 1, '^'),
    restricao(6, 1, 'v'), restricao(7, 1, '^'),

    % Coluna 2
    restricao(0, 2, '^'), restricao(1, 2, '^'),
    restricao(3, 2, '^'), restricao(4, 2, '^'),
    restricao(6, 2, 'v'), restricao(7, 2, 'v'),

    % Coluna 3
    restricao(0, 3, 'v'), restricao(1, 3, '^'),
    restricao(3, 3, 'v'), restricao(4, 3, '^'),
    restricao(6, 3, '^'), restricao(7, 3, 'v'),

    % Coluna 4
    restricao(0, 4, 'v'), restricao(1, 4, 'v'),
    restricao(3, 4, 'v'), restricao(4, 4, '^'),
    restricao(6, 4, 'v'), restricao(7, 4, 'v'),

    % Coluna 5
    restricao(0, 5, 'v'), restricao(1, 5, 'v'),
    restricao(3, 5, 'v'), restricao(4, 5, 'v'),
    restricao(6, 5, 'v'), restricao(7, 5, '^'),

    % Coluna 6
    restricao(0, 6, '^'), restricao(1, 6, 'v'),
    restricao(3, 6, '^'), restricao(4, 6, 'v'),
    restricao(6, 6, '^'), restricao(7, 6, 'v'),

    % Coluna 7
    restricao(0, 7, 'v'), restricao(1, 7, 'v'),
    restricao(3, 7, 'v'), restricao(4, 7, 'v'),
    restricao(6, 7, '^'), restricao(7, 7, '^'),

    % Coluna 8
    restricao(0, 8, '^'), restricao(1, 8, 'v'),
    restricao(3, 8, '^'), restricao(4, 8, 'v'),
    restricao(6, 8, '^'), restricao(7, 8, 'v')
]).


% Aplica todas as restrições horizontais (<, >)
aplica_restricoes_horizontais(Quadrante) :-
    restricoes_horizontais(Restricoes),
    aplica_restricoes_h(Quadrante, Restricoes).

aplica_restricoes_h(_, []). % Caso base: lista vazia de restrições
aplica_restricoes_h(Quadrante, [restricao(Linha, Coluna, Sinal)|Rest]) :-
    ColunaSeguinte is Coluna + 1,
    nth0(Linha, Quadrante, LinhaAtual),
    nth0(Coluna, LinhaAtual, CelulaAtual),
    nth0(ColunaSeguinte, LinhaAtual, CelulaSeguinte),
    ( Sinal = '>' -> CelulaAtual #> CelulaSeguinte
    ; Sinal = '<' -> CelulaAtual #< CelulaSeguinte
    ; true), % Caso de sinal desconhecido (ignorado)
    aplica_restricoes_h(Quadrante, Rest).

% Aplica todas as restrições verticais (^, v)
aplica_restricoes_verticais(Quadrante) :-
    restricoes_verticais(Restricoes),
    aplica_restricoes_v(Quadrante, Restricoes).

aplica_restricoes_v(_, []). % Caso base: lista vazia de restrições
aplica_restricoes_v(Quadrante, [restricao(Linha, Coluna, Sinal)|Rest]) :-
    LinhaSeguinte is Linha + 1,
    nth0(Linha, Quadrante, LinhaAtual),
    nth0(Coluna, LinhaAtual, CelulaAtual),
    nth0(LinhaSeguinte, Quadrante, LinhaSeguinteLinha),
    nth0(Coluna, LinhaSeguinteLinha, CelulaSeguinte),
    ( Sinal = '^' -> CelulaAtual #< CelulaSeguinte
    ; Sinal = 'v' -> CelulaAtual #> CelulaSeguinte
    ; true), % Caso de sinal desconhecido (ignorado)
    aplica_restricoes_v(Quadrante, Rest).

% Predicado utilitário: imprime o tabuleiro linha por linha
imprime_quadrante([]).
imprime_quadrante([Linha|Resto]) :-
    format('~w~n', [Linha]),
    imprime_quadrante(Resto).

% Exemplo de execução: cria um tabuleiro vazio, resolve e imprime a solução
exemplo :-
    length(Grade, 9),
    maplist(same_length(Grade), Grade),
    resolve_futoshiki(Grade, Solucao),
    write('Solução encontrada:'), nl,
    imprime_quadrante(Solucao).

% Para executar no Prolog:
% ?- exemplo.
